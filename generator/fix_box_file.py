#! /usr/bin/env python3
from box import get_boxes_for_line, find_big_small_boxes
import banti_parser as parser


def fix_box_file(font_style, text_file, box_file):
    parser.set_params(font_style[:-3])
    text_file = open(text_file)
    LineBoxGetter = get_boxes_for_line(box_file)
    rslt_bxs = []

    for line_boxes in LineBoxGetter:
        line_texts = parser.get_letters_from_line(text_file.readline())

        line_id = line_boxes[0].line
        num_txt_words_in_line = len(line_texts)
        num_box_words_in_line = line_boxes[-1].word + 1
        if num_box_words_in_line != num_txt_words_in_line:
            print("{} {}: T{} B{}"
            "\n(Can not fix erreneous word count. Resegment with more spacing)"
            "".format(font_style, line_id,
            num_txt_words_in_line, num_box_words_in_line))
            continue

        # print("\nLINE : ", line_id)
        for iw in range(num_txt_words_in_line):
            # print(",", iw, end="")
            iw_boxes = [a for a in line_boxes if a.word == iw]
            iw_texts = line_texts[iw]
            n_iw_boxes = len(iw_boxes)
            n_iw_texts = len(iw_texts)
            # parser.warn(n_iw_boxes, iw_texts, font_style)

            if n_iw_boxes > n_iw_texts:
                if n_iw_texts == 1:
                    # Just combile all the boxes in to one!
                    res_box = iw_boxes[0]
                    for i in range(1, n_iw_boxes):
                        res_box = res_box.AddBox(iw_boxes[1])
                    rslt_bxs.append(res_box.SetText(iw_texts[0]))

                elif n_iw_boxes == n_iw_texts + 1:
                    # May be a visarga problem
                    if iw_texts[-1] == 'ః': 
                        rslt_bxs.append(iw_boxes[0].SetText(iw_texts[0]))                    
                        rslt_bxs.append(iw_boxes[1].AddBox(iw_boxes[2], iw_texts[1]))

                    # Check for bad consonants and pray to God
                    elif parser.contains_vattu_haver(iw_texts):
                        culprit = parser.vattu_haver_index(iw_texts)
                        big, small = find_big_small_boxes(iw_boxes)
                        if big != culprit and iw_texts[1][0] != '్':
                            pass
                            #print(font_style, line_id, iw, ":Big is not Culprit (B, C, S):", (big, culprit, small), ''.join(iw_texts))
                            #for b in iw_boxes: b.Print()
                        if small == culprit + 1:
                            i_text = 0
                            for i in range(n_iw_boxes):
                                if i == small: continue
                                if i == culprit:
                                    rslt_bxs.append(iw_boxes[culprit].AddBox(iw_boxes[small], iw_texts[i_text]))
                                else:
                                    rslt_bxs.append(iw_boxes[i].SetText(iw_texts[i_text]))
                                i_text += 1
                        else:
                            pass
                            #print(font_style, line_id, iw, ":Not Combining (B, C, S):", (big, culprit, small), ''.join(iw_texts))

            elif n_iw_boxes < n_iw_texts:
                # Touching Error May or May not want to Print These
                if n_iw_boxes == 1:
                    rslt_bxs.append(iw_boxes[0].SetText(''.join(iw_texts), "TOUCH"))

            else:
                for i in range(n_iw_boxes):
                    rslt_bxs.append(iw_boxes[i].SetText(iw_texts[i]))
    
    text_file.close()
    return rslt_bxs

if __name__ == '__main__':
    import sys, os
    if len(sys.argv) < 3:
        print('''Usage:{0} <text_file> <box_file> [font_style]
        Fixes the character codes in the box_file generated by banti using the 
        true character codes from the text_file'''.format(sys.argv[0]))
        sys.exit()

    if len(sys.argv) > 3:
        font_style = sys.argv[3]
    else:
        box_fname = os.path.basename(sys.argv[2]) # e.g:- 'Gautami_48.box'
        font_style = box_fname[:-4]

    print(font_style)
    fixed = fix_box_file(font_style, sys.argv[1], sys.argv[2])
    with open(sys.argv[2].replace('.box', '.good'), 'w') as f:
        for box in fixed:
            f.write(str(box))